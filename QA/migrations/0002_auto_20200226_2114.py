# Generated by Django 2.0.1 on 2020-02-26 21:14

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('QA', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acontent', models.TextField(max_length=500)),
                ('a_time', models.DateTimeField(auto_now_add=True)),
                ('adopt', models.SmallIntegerField(choices=[(0, 'no'), (1, 'yes')], default=0)),
                ('Ans_deal_status', models.IntegerField(choices=[('0', '未处理'), ('1', '已处理')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Answer_Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ccontent', models.TextField(max_length=500)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('AnsComment_deal_status', models.IntegerField(choices=[('0', '未处理'), ('1', '已处理')], default=0)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='Answer_Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('l_time', models.DateTimeField(auto_now_add=True)),
                ('AnsLike_deal_status', models.IntegerField(choices=[('0', '未处理'), ('1', '已处理')], default=0)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_name', models.CharField(max_length=50)),
                ('c_introduction', models.TextField(blank=True, max_length=500)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('c_img', models.ImageField(default='community_img/com.jpg', upload_to='community_img')),
            ],
        ),
        migrations.CreateModel(
            name='Community_Apply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agree', models.SmallIntegerField(choices=[(0, '拒绝'), (1, '同意'), (2, '未处理')], default=2)),
                ('ca_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Community_Chat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cc_message', models.TextField(max_length=500)),
                ('cc_img', models.ImageField(blank=True, null=True, upload_to='chat_img')),
                ('cc_file', models.FileField(blank=True, null=True, upload_to='chat_file')),
                ('cc_file_name', models.CharField(blank=True, max_length=200, null=True)),
                ('cc_file_type', models.CharField(blank=True, max_length=20, null=True)),
                ('cc_voice', models.FileField(blank=True, null=True, upload_to='chat_voice')),
                ('cc_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Community_File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cf_name', models.CharField(default='', max_length=20)),
                ('cf_file', models.FileField(blank=True, null=True, upload_to='community_file')),
                ('cf_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Community_Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cm_time', models.DateTimeField(auto_now_add=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Community')),
            ],
        ),
        migrations.CreateModel(
            name='Community_Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cn_title', models.CharField(max_length=20)),
                ('cn_content', models.TextField(max_length=500)),
                ('cn_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerifyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, verbose_name='验证码')),
                ('email', models.EmailField(max_length=50, verbose_name='邮箱')),
                ('send_type', models.CharField(choices=[('register', '注册'), ('forget', '找回密码')], max_length=10)),
                ('send_time', models.DateTimeField(default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_feedback_email', models.EmailField(max_length=254)),
                ('user_feedback_time', models.DateTimeField(auto_now=True)),
                ('user_feedback', models.TextField(max_length=1024)),
                ('admin_feedback', models.TextField(blank=True, max_length=1024)),
                ('admin_feedback_time', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='First_type',
            fields=[
                ('ptid', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('pyname', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='JwNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jw_news', models.CharField(max_length=150)),
                ('jw_link', models.CharField(max_length=150)),
                ('jw_content', models.CharField(max_length=1000)),
                ('jw_post_time', models.CharField(blank=True, max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qtitle', models.CharField(max_length=100)),
                ('qcontent', models.TextField(max_length=500)),
                ('q_time', models.DateTimeField(auto_now_add=True)),
                ('q_img', models.ImageField(blank=True, null=True, upload_to='question_img')),
                ('q_file', models.FileField(blank=True, null=True, upload_to='question_file')),
                ('ftype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.First_type')),
            ],
        ),
        migrations.CreateModel(
            name='Question_Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_time', models.DateTimeField(auto_now_add=True)),
                ('Followship_deal_status', models.IntegerField(choices=[('0', '未处理'), ('1', '已处理')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Second_type',
            fields=[
                ('tid', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('tname', models.CharField(max_length=50)),
                ('Ptype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.First_type')),
            ],
        ),
        migrations.CreateModel(
            name='User_Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uf_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('UserFollow_deal_status', models.IntegerField(choices=[('0', '未处理'), ('1', '已处理')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='UserMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.IntegerField(default=0, verbose_name='接受用户')),
                ('message', models.CharField(max_length=500, verbose_name='消息内容')),
                ('has_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('massage_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
        ),
        migrations.CreateModel(
            name='XgNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Xg_news', models.CharField(max_length=150)),
                ('Xg_link', models.CharField(max_length=150)),
                ('Xg_content', models.CharField(max_length=1000)),
                ('Xg_post_time', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='XyNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Xy_news', models.CharField(max_length=150)),
                ('Xy_link', models.CharField(max_length=150)),
                ('Xy_content', models.CharField(max_length=1000)),
                ('Xy_post_time', models.CharField(blank=True, max_length=128, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='headshot_img',
            field=models.ImageField(default='headshot_img/headshot.jpg', upload_to='headshot_img'),
        ),
        migrations.AddField(
            model_name='user',
            name='per_introduction',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='user',
            name='per_signature',
            field=models.CharField(blank=True, max_length=1024),
        ),
        migrations.AlterField(
            model_name='user',
            name='c_time',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(max_length=254),
        ),
        migrations.AddField(
            model_name='user_favorite',
            name='follower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_follower', to='QA.User'),
        ),
        migrations.AddField(
            model_name='user_favorite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_user', to='QA.User'),
        ),
        migrations.AddField(
            model_name='question_favorite',
            name='fauthor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='question_favorite',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Question'),
        ),
        migrations.AddField(
            model_name='question',
            name='qauthor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='question',
            name='stype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Second_type'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='community_notice',
            name='cn_author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='community_notice',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Community'),
        ),
        migrations.AddField(
            model_name='community_member',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='community_file',
            name='cf_author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='community_file',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Community'),
        ),
        migrations.AddField(
            model_name='community_chat',
            name='cc_author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='community_chat',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Community'),
        ),
        migrations.AddField(
            model_name='community_apply',
            name='ca_author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='community_apply',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Community'),
        ),
        migrations.AddField(
            model_name='community',
            name='c_author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='answer_like',
            name='lauthor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='answer_comment',
            name='cauthor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='answer',
            name='aauthor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.User'),
        ),
        migrations.AddField(
            model_name='answer',
            name='qid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QA.Question'),
        ),
        migrations.AddField(
            model_name='user',
            name='uid_qid',
            field=models.ManyToManyField(through='QA.Question_Favorite', to='QA.Question'),
        ),
        migrations.AlterUniqueTogether(
            name='user_favorite',
            unique_together={('user', 'follower')},
        ),
    ]
